/** Generated by YAKINDU Statechart Tools code generator. */
package drinkingmachine-n-v2.defaultsm;

import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;

public class DefaultSMStatemachine implements IDefaultSMStatemachine {
	protected class SCInterfaceImpl implements SCInterface {
	
		private List<SCInterfaceListener> listeners = new LinkedList<SCInterfaceListener>();
		
		public List<SCInterfaceListener> getListeners() {
			return listeners;
		}
		private boolean coffee;
		
		
		public void raiseCoffee() {
			synchronized(DefaultSMStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							coffee = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean expresso;
		
		
		public void raiseExpresso() {
			synchronized(DefaultSMStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							expresso = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean tea;
		
		
		public void raiseTea() {
			synchronized(DefaultSMStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							tea = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean soup;
		
		
		public void raiseSoup() {
			synchronized(DefaultSMStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							soup = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean icedTea;
		
		
		public void raiseIcedTea() {
			synchronized(DefaultSMStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							icedTea = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean cinquanteCents;
		
		
		public void raiseCinquanteCents() {
			synchronized(DefaultSMStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							cinquanteCents = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean vingtCinqCents;
		
		
		public void raiseVingtCinqCents() {
			synchronized(DefaultSMStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							vingtCinqCents = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean dixCents;
		
		
		public void raiseDixCents() {
			synchronized(DefaultSMStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							dixCents = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean bip;
		
		
		public void raiseBip() {
			synchronized(DefaultSMStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							bip = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean cancel;
		
		
		public void raiseCancel() {
			synchronized(DefaultSMStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							cancel = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean temperature;
		
		
		public void raiseTemperature() {
			synchronized(DefaultSMStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							temperature = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean size;
		
		
		public void raiseSize() {
			synchronized(DefaultSMStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							size = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean sugar;
		
		
		public void raiseSugar() {
			synchronized(DefaultSMStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							sugar = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean validate;
		
		
		public void raiseValidate() {
			synchronized(DefaultSMStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							validate = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean doCoffee;
		
		
		public boolean isRaisedDoCoffee() {
			synchronized(DefaultSMStatemachine.this) {
				return doCoffee;
			}
		}
		
		protected void raiseDoCoffee() {
			synchronized(DefaultSMStatemachine.this) {
				doCoffee = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onDoCoffeeRaised();
				}
			}
		}
		
		private boolean doExpresso;
		
		
		public boolean isRaisedDoExpresso() {
			synchronized(DefaultSMStatemachine.this) {
				return doExpresso;
			}
		}
		
		protected void raiseDoExpresso() {
			synchronized(DefaultSMStatemachine.this) {
				doExpresso = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onDoExpressoRaised();
				}
			}
		}
		
		private boolean doTea;
		
		
		public boolean isRaisedDoTea() {
			synchronized(DefaultSMStatemachine.this) {
				return doTea;
			}
		}
		
		protected void raiseDoTea() {
			synchronized(DefaultSMStatemachine.this) {
				doTea = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onDoTeaRaised();
				}
			}
		}
		
		private boolean doSoup;
		
		
		public boolean isRaisedDoSoup() {
			synchronized(DefaultSMStatemachine.this) {
				return doSoup;
			}
		}
		
		protected void raiseDoSoup() {
			synchronized(DefaultSMStatemachine.this) {
				doSoup = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onDoSoupRaised();
				}
			}
		}
		
		private boolean doIcedTea;
		
		
		public boolean isRaisedDoIcedTea() {
			synchronized(DefaultSMStatemachine.this) {
				return doIcedTea;
			}
		}
		
		protected void raiseDoIcedTea() {
			synchronized(DefaultSMStatemachine.this) {
				doIcedTea = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onDoIcedTeaRaised();
				}
			}
		}
		
		private boolean updateTemperature;
		
		
		public boolean isRaisedUpdateTemperature() {
			synchronized(DefaultSMStatemachine.this) {
				return updateTemperature;
			}
		}
		
		protected void raiseUpdateTemperature() {
			synchronized(DefaultSMStatemachine.this) {
				updateTemperature = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onUpdateTemperatureRaised();
				}
			}
		}
		
		private boolean updateSize;
		
		
		public boolean isRaisedUpdateSize() {
			synchronized(DefaultSMStatemachine.this) {
				return updateSize;
			}
		}
		
		protected void raiseUpdateSize() {
			synchronized(DefaultSMStatemachine.this) {
				updateSize = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onUpdateSizeRaised();
				}
			}
		}
		
		private boolean updateSugar;
		
		
		public boolean isRaisedUpdateSugar() {
			synchronized(DefaultSMStatemachine.this) {
				return updateSugar;
			}
		}
		
		protected void raiseUpdateSugar() {
			synchronized(DefaultSMStatemachine.this) {
				updateSugar = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onUpdateSugarRaised();
				}
			}
		}
		
		private boolean doSelect;
		
		
		public boolean isRaisedDoSelect() {
			synchronized(DefaultSMStatemachine.this) {
				return doSelect;
			}
		}
		
		protected void raiseDoSelect() {
			synchronized(DefaultSMStatemachine.this) {
				doSelect = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onDoSelectRaised();
				}
			}
		}
		
		private boolean doPrepare;
		
		
		public boolean isRaisedDoPrepare() {
			synchronized(DefaultSMStatemachine.this) {
				return doPrepare;
			}
		}
		
		protected void raiseDoPrepare() {
			synchronized(DefaultSMStatemachine.this) {
				doPrepare = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onDoPrepareRaised();
				}
			}
		}
		
		private boolean doPay;
		
		
		public boolean isRaisedDoPay() {
			synchronized(DefaultSMStatemachine.this) {
				return doPay;
			}
		}
		
		protected void raiseDoPay() {
			synchronized(DefaultSMStatemachine.this) {
				doPay = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onDoPayRaised();
				}
			}
		}
		
		private boolean doCancel;
		
		
		public boolean isRaisedDoCancel() {
			synchronized(DefaultSMStatemachine.this) {
				return doCancel;
			}
		}
		
		protected void raiseDoCancel() {
			synchronized(DefaultSMStatemachine.this) {
				doCancel = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onDoCancelRaised();
				}
			}
		}
		
		private boolean doFinish;
		
		
		public boolean isRaisedDoFinish() {
			synchronized(DefaultSMStatemachine.this) {
				return doFinish;
			}
		}
		
		protected void raiseDoFinish() {
			synchronized(DefaultSMStatemachine.this) {
				doFinish = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onDoFinishRaised();
				}
			}
		}
		
		private boolean selection;
		
		public synchronized boolean getSelection() {
			synchronized(DefaultSMStatemachine.this) {
				return selection;
			}
		}
		
		public void setSelection(boolean value) {
			synchronized(DefaultSMStatemachine.this) {
				this.selection = value;
			}
		}
		
		private boolean pay;
		
		public synchronized boolean getPay() {
			synchronized(DefaultSMStatemachine.this) {
				return pay;
			}
		}
		
		public void setPay(boolean value) {
			synchronized(DefaultSMStatemachine.this) {
				this.pay = value;
			}
		}
		
		protected void clearEvents() {
			coffee = false;
			expresso = false;
			tea = false;
			soup = false;
			icedTea = false;
			cinquanteCents = false;
			vingtCinqCents = false;
			dixCents = false;
			bip = false;
			cancel = false;
			temperature = false;
			size = false;
			sugar = false;
			validate = false;
		}
		protected void clearOutEvents() {
		
		doCoffee = false;
		doExpresso = false;
		doTea = false;
		doSoup = false;
		doIcedTea = false;
		updateTemperature = false;
		updateSize = false;
		updateSugar = false;
		doSelect = false;
		doPrepare = false;
		doPay = false;
		doCancel = false;
		doFinish = false;
		}
		
	}
	
	
	protected SCInterfaceImpl sCInterface;
	
	private boolean initialized = false;
	
	public enum State {
		main_order,
		main_order_pay_pay,
		main_order_pay__final_,
		main_order_select__final_,
		main_order_select_Select,
		main_prepare,
		$NullState$
	};
	
	private final State[] stateVector = new State[2];
	
	private int nextStateIndex;
	
	private BlockingQueue<Runnable> inEventQueue = new LinkedBlockingQueue<Runnable>();
	private boolean isRunningCycle = false;
	public DefaultSMStatemachine() {
		sCInterface = new SCInterfaceImpl();
	}
	
	public synchronized void init() {
		this.initialized = true;
		for (int i = 0; i < 2; i++) {
			stateVector[i] = State.$NullState$;
		}
		clearEvents();
		clearOutEvents();
		sCInterface.setSelection(false);
		
		sCInterface.setPay(false);
	}
	
	public synchronized void enter() {
		if (!initialized) {
			throw new IllegalStateException(
				"The state machine needs to be initialized first by calling the init() function."
			);
		}
		enterSequence_main_default();
	}
	
	public synchronized void runCycle() {
		if (!initialized)
			throw new IllegalStateException(
					"The state machine needs to be initialized first by calling the init() function.");
		
		if (isRunningCycle) {
			return;
		}
		isRunningCycle = true;
		
		clearOutEvents();
	
		Runnable task = getNextEvent();
		if (task == null) {
			task = getDefaultEvent();
		}
		
		while (task != null) {
			task.run();
			clearEvents();
			task = getNextEvent();
		}
		
		isRunningCycle = false;
	}
	
	protected synchronized void singleCycle() {
		for (nextStateIndex = 0; nextStateIndex < stateVector.length; nextStateIndex++) {
			switch (stateVector[nextStateIndex]) {
			case main_order_pay_pay:
				main_order_pay_pay_react(true);
				break;
			case main_order_pay__final_:
				main_order_pay__final__react(true);
				break;
			case main_order_select__final_:
				main_order_select__final__react(true);
				break;
			case main_order_select_Select:
				main_order_select_Select_react(true);
				break;
			case main_prepare:
				main_prepare_react(true);
				break;
			default:
				// $NullState$
			}
		}
	}
	
	protected Runnable getNextEvent() {
		if(!inEventQueue.isEmpty()) {
			return inEventQueue.poll();
		}
		return null;
	}
	
	protected Runnable getDefaultEvent() {
		return new Runnable() {
			@Override
			public void run() {
				singleCycle();
			}
		};
	}
	
	public synchronized void exit() {
		exitSequence_main();
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public synchronized boolean isActive() {
		return stateVector[0] != State.$NullState$||stateVector[1] != State.$NullState$;
	}
	
	/** 
	* @see IStatemachine#isFinal()
	*/
	public synchronized boolean isFinal() {
		return (stateVector[0] == State.main_order_pay__final_) && (stateVector[1] == State.main_order_select__final_);
	}
	/**
	* This method resets the incoming events (time events included).
	*/
	protected void clearEvents() {
		sCInterface.clearEvents();
	}
	
	/**
	* This method resets the outgoing events.
	*/
	protected void clearOutEvents() {
		sCInterface.clearOutEvents();
	}
	
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public synchronized boolean isStateActive(State state) {
	
		switch (state) {
		case main_order:
			return stateVector[0].ordinal() >= State.
					main_order.ordinal()&& stateVector[0].ordinal() <= State.main_order_select_Select.ordinal();
		case main_order_pay_pay:
			return stateVector[0] == State.main_order_pay_pay;
		case main_order_pay__final_:
			return stateVector[0] == State.main_order_pay__final_;
		case main_order_select__final_:
			return stateVector[1] == State.main_order_select__final_;
		case main_order_select_Select:
			return stateVector[1] == State.main_order_select_Select;
		case main_prepare:
			return stateVector[0] == State.main_prepare;
		default:
			return false;
		}
	}
	
	public SCInterface getSCInterface() {
		return sCInterface;
	}
	
	public synchronized void raiseCoffee() {
		sCInterface.raiseCoffee();
	}
	
	public synchronized void raiseExpresso() {
		sCInterface.raiseExpresso();
	}
	
	public synchronized void raiseTea() {
		sCInterface.raiseTea();
	}
	
	public synchronized void raiseSoup() {
		sCInterface.raiseSoup();
	}
	
	public synchronized void raiseIcedTea() {
		sCInterface.raiseIcedTea();
	}
	
	public synchronized void raiseCinquanteCents() {
		sCInterface.raiseCinquanteCents();
	}
	
	public synchronized void raiseVingtCinqCents() {
		sCInterface.raiseVingtCinqCents();
	}
	
	public synchronized void raiseDixCents() {
		sCInterface.raiseDixCents();
	}
	
	public synchronized void raiseBip() {
		sCInterface.raiseBip();
	}
	
	public synchronized void raiseCancel() {
		sCInterface.raiseCancel();
	}
	
	public synchronized void raiseTemperature() {
		sCInterface.raiseTemperature();
	}
	
	public synchronized void raiseSize() {
		sCInterface.raiseSize();
	}
	
	public synchronized void raiseSugar() {
		sCInterface.raiseSugar();
	}
	
	public synchronized void raiseValidate() {
		sCInterface.raiseValidate();
	}
	
	public synchronized boolean isRaisedDoCoffee() {
		return sCInterface.isRaisedDoCoffee();
	}
	
	public synchronized boolean isRaisedDoExpresso() {
		return sCInterface.isRaisedDoExpresso();
	}
	
	public synchronized boolean isRaisedDoTea() {
		return sCInterface.isRaisedDoTea();
	}
	
	public synchronized boolean isRaisedDoSoup() {
		return sCInterface.isRaisedDoSoup();
	}
	
	public synchronized boolean isRaisedDoIcedTea() {
		return sCInterface.isRaisedDoIcedTea();
	}
	
	public synchronized boolean isRaisedUpdateTemperature() {
		return sCInterface.isRaisedUpdateTemperature();
	}
	
	public synchronized boolean isRaisedUpdateSize() {
		return sCInterface.isRaisedUpdateSize();
	}
	
	public synchronized boolean isRaisedUpdateSugar() {
		return sCInterface.isRaisedUpdateSugar();
	}
	
	public synchronized boolean isRaisedDoSelect() {
		return sCInterface.isRaisedDoSelect();
	}
	
	public synchronized boolean isRaisedDoPrepare() {
		return sCInterface.isRaisedDoPrepare();
	}
	
	public synchronized boolean isRaisedDoPay() {
		return sCInterface.isRaisedDoPay();
	}
	
	public synchronized boolean isRaisedDoCancel() {
		return sCInterface.isRaisedDoCancel();
	}
	
	public synchronized boolean isRaisedDoFinish() {
		return sCInterface.isRaisedDoFinish();
	}
	
	public synchronized boolean getSelection() {
		return sCInterface.getSelection();
	}
	
	public synchronized void setSelection(boolean value) {
		sCInterface.setSelection(value);
	}
	
	public synchronized boolean getPay() {
		return sCInterface.getPay();
	}
	
	public synchronized void setPay(boolean value) {
		sCInterface.setPay(value);
	}
	
	/* Entry action for state 'prepare'. */
	private void entryAction_main_prepare() {
		sCInterface.raiseDoPrepare();
	}
	
	/* 'default' enter sequence for state order */
	private void enterSequence_main_order_default() {
		enterSequence_main_order_pay_default();
		enterSequence_main_order_select_default();
	}
	
	/* 'default' enter sequence for state pay */
	private void enterSequence_main_order_pay_pay_default() {
		nextStateIndex = 0;
		stateVector[0] = State.main_order_pay_pay;
	}
	
	/* Default enter sequence for state null */
	private void enterSequence_main_order_pay__final__default() {
		nextStateIndex = 0;
		stateVector[0] = State.main_order_pay__final_;
	}
	
	/* Default enter sequence for state null */
	private void enterSequence_main_order_select__final__default() {
		nextStateIndex = 1;
		stateVector[1] = State.main_order_select__final_;
	}
	
	/* 'default' enter sequence for state Select */
	private void enterSequence_main_order_select_Select_default() {
		nextStateIndex = 1;
		stateVector[1] = State.main_order_select_Select;
	}
	
	/* 'default' enter sequence for state prepare */
	private void enterSequence_main_prepare_default() {
		entryAction_main_prepare();
		nextStateIndex = 0;
		stateVector[0] = State.main_prepare;
	}
	
	/* 'default' enter sequence for region main */
	private void enterSequence_main_default() {
		react_main__entry_Default();
	}
	
	/* 'default' enter sequence for region pay */
	private void enterSequence_main_order_pay_default() {
		react_main_order_pay__entry_Default();
	}
	
	/* 'default' enter sequence for region select */
	private void enterSequence_main_order_select_default() {
		react_main_order_select__entry_Default();
	}
	
	/* Default exit sequence for state order */
	private void exitSequence_main_order() {
		exitSequence_main_order_pay();
		exitSequence_main_order_select();
	}
	
	/* Default exit sequence for state pay */
	private void exitSequence_main_order_pay_pay() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for final state. */
	private void exitSequence_main_order_pay__final_() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for final state. */
	private void exitSequence_main_order_select__final_() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
	}
	
	/* Default exit sequence for state Select */
	private void exitSequence_main_order_select_Select() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
	}
	
	/* Default exit sequence for state prepare */
	private void exitSequence_main_prepare() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for region main */
	private void exitSequence_main() {
		switch (stateVector[0]) {
		case main_order_pay_pay:
			exitSequence_main_order_pay_pay();
			break;
		case main_order_pay__final_:
			exitSequence_main_order_pay__final_();
			break;
		case main_prepare:
			exitSequence_main_prepare();
			break;
		default:
			break;
		}
		
		switch (stateVector[1]) {
		case main_order_select__final_:
			exitSequence_main_order_select__final_();
			break;
		case main_order_select_Select:
			exitSequence_main_order_select_Select();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region pay */
	private void exitSequence_main_order_pay() {
		switch (stateVector[0]) {
		case main_order_pay_pay:
			exitSequence_main_order_pay_pay();
			break;
		case main_order_pay__final_:
			exitSequence_main_order_pay__final_();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region select */
	private void exitSequence_main_order_select() {
		switch (stateVector[1]) {
		case main_order_select__final_:
			exitSequence_main_order_select__final_();
			break;
		case main_order_select_Select:
			exitSequence_main_order_select_Select();
			break;
		default:
			break;
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_order_pay__entry_Default() {
		enterSequence_main_order_pay_pay_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_order_select__entry_Default() {
		enterSequence_main_order_select_Select_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main__entry_Default() {
		enterSequence_main_order_default();
	}
	
	private boolean react() {
		return false;
	}
	
	private boolean main_order_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			exitSequence_main_order();
			enterSequence_main_prepare_default();
			react();
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean main_order_pay_pay_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.getPay()) {
				exitSequence_main_order_pay_pay();
				enterSequence_main_order_pay__final__default();
			} else {
				if ((sCInterface.cinquanteCents || (sCInterface.vingtCinqCents || (sCInterface.dixCents || sCInterface.bip)))) {
					exitSequence_main_order_pay_pay();
					sCInterface.raiseDoPay();
					
					enterSequence_main_order_pay_pay_default();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
	private boolean main_order_pay__final__react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			did_transition = false;
		}
		return did_transition;
	}
	
	private boolean main_order_select__final__react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			did_transition = false;
		}
		if (did_transition==false) {
			did_transition = main_order_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_order_select_Select_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.coffee) {
				exitSequence_main_order_select_Select();
				sCInterface.raiseDoSelect();
				
				enterSequence_main_order_select__final__default();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = main_order_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_prepare_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			did_transition = false;
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
}
