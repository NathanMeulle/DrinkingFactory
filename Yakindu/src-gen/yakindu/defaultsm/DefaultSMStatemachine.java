/** Generated by YAKINDU Statechart Tools code generator. */
package yakindu.defaultsm;

import java.util.LinkedList;
import java.util.Queue;
import yakindu.ITimer;

public class DefaultSMStatemachine implements IDefaultSMStatemachine {
	protected class SCInterfaceImpl implements SCInterface {
	
		private SCInterfaceOperationCallback operationCallback;
		
		public void setSCInterfaceOperationCallback(
				SCInterfaceOperationCallback operationCallback) {
			this.operationCallback = operationCallback;
		}
		private boolean coffee;
		
		
		public void raiseCoffee() {
			coffee = true;
			runCycle();
		}
		
		private boolean expresso;
		
		
		public void raiseExpresso() {
			expresso = true;
			runCycle();
		}
		
		private boolean tea;
		
		
		public void raiseTea() {
			tea = true;
			runCycle();
		}
		
		private boolean soup;
		
		
		public void raiseSoup() {
			soup = true;
			runCycle();
		}
		
		private boolean icedTea;
		
		
		public void raiseIcedTea() {
			icedTea = true;
			runCycle();
		}
		
		private boolean cinquanteCents;
		
		
		public void raiseCinquanteCents() {
			cinquanteCents = true;
			runCycle();
		}
		
		private boolean vingtCinqCents;
		
		
		public void raiseVingtCinqCents() {
			vingtCinqCents = true;
			runCycle();
		}
		
		private boolean dixCents;
		
		
		public void raiseDixCents() {
			dixCents = true;
			runCycle();
		}
		
		private boolean bip;
		
		
		public void raiseBip() {
			bip = true;
			runCycle();
		}
		
		private boolean cancel;
		
		
		public void raiseCancel() {
			cancel = true;
			runCycle();
		}
		
		private boolean temp;
		
		
		public void raiseTemp() {
			temp = true;
			runCycle();
		}
		
		private boolean size;
		
		
		public void raiseSize() {
			size = true;
			runCycle();
		}
		
		private boolean sugar;
		
		
		public void raiseSugar() {
			sugar = true;
			runCycle();
		}
		
		private boolean validate;
		
		
		public void raiseValidate() {
			validate = true;
			runCycle();
		}
		
		private boolean doCoffee;
		
		
		public boolean isRaisedDoCoffee() {
			return doCoffee;
		}
		
		protected void raiseDoCoffee() {
			doCoffee = true;
		}
		
		private boolean doExpresso;
		
		
		public boolean isRaisedDoExpresso() {
			return doExpresso;
		}
		
		protected void raiseDoExpresso() {
			doExpresso = true;
		}
		
		private boolean doTea;
		
		
		public boolean isRaisedDoTea() {
			return doTea;
		}
		
		protected void raiseDoTea() {
			doTea = true;
		}
		
		private boolean doSoup;
		
		
		public boolean isRaisedDoSoup() {
			return doSoup;
		}
		
		protected void raiseDoSoup() {
			doSoup = true;
		}
		
		private boolean doIcedTea;
		
		
		public boolean isRaisedDoIcedTea() {
			return doIcedTea;
		}
		
		protected void raiseDoIcedTea() {
			doIcedTea = true;
		}
		
		private boolean doTemp;
		
		
		public boolean isRaisedDoTemp() {
			return doTemp;
		}
		
		protected void raiseDoTemp() {
			doTemp = true;
		}
		
		private boolean doSize;
		
		
		public boolean isRaisedDoSize() {
			return doSize;
		}
		
		protected void raiseDoSize() {
			doSize = true;
		}
		
		private boolean doSugar;
		
		
		public boolean isRaisedDoSugar() {
			return doSugar;
		}
		
		protected void raiseDoSugar() {
			doSugar = true;
		}
		
		private boolean doSelect;
		
		
		public boolean isRaisedDoSelect() {
			return doSelect;
		}
		
		protected void raiseDoSelect() {
			doSelect = true;
		}
		
		private boolean doPrepare;
		
		
		public boolean isRaisedDoPrepare() {
			return doPrepare;
		}
		
		protected void raiseDoPrepare() {
			doPrepare = true;
		}
		
		private boolean doPay;
		
		
		public boolean isRaisedDoPay() {
			return doPay;
		}
		
		protected void raiseDoPay() {
			doPay = true;
		}
		
		private boolean doCancel;
		
		
		public boolean isRaisedDoCancel() {
			return doCancel;
		}
		
		protected void raiseDoCancel() {
			doCancel = true;
		}
		
		private boolean doFinish;
		
		
		public boolean isRaisedDoFinish() {
			return doFinish;
		}
		
		protected void raiseDoFinish() {
			doFinish = true;
		}
		
		private boolean doReceipt;
		
		
		public boolean isRaisedDoReceipt() {
			return doReceipt;
		}
		
		protected void raiseDoReceipt() {
			doReceipt = true;
		}
		
		private boolean doPoor;
		
		
		public boolean isRaisedDoPoor() {
			return doPoor;
		}
		
		protected void raiseDoPoor() {
			doPoor = true;
		}
		
		private boolean doDosette;
		
		
		public boolean isRaisedDoDosette() {
			return doDosette;
		}
		
		protected void raiseDoDosette() {
			doDosette = true;
		}
		
		private boolean doGrain;
		
		
		public boolean isRaisedDoGrain() {
			return doGrain;
		}
		
		protected void raiseDoGrain() {
			doGrain = true;
		}
		
		private boolean doSachet;
		
		
		public boolean isRaisedDoSachet() {
			return doSachet;
		}
		
		protected void raiseDoSachet() {
			doSachet = true;
		}
		
		private boolean doGobelet;
		
		
		public boolean isRaisedDoGobelet() {
			return doGobelet;
		}
		
		protected void raiseDoGobelet() {
			doGobelet = true;
		}
		
		private boolean doHeat;
		
		
		public boolean isRaisedDoHeat() {
			return doHeat;
		}
		
		protected void raiseDoHeat() {
			doHeat = true;
		}
		
		private boolean doInfuse;
		
		
		public boolean isRaisedDoInfuse() {
			return doInfuse;
		}
		
		protected void raiseDoInfuse() {
			doInfuse = true;
		}
		
		private boolean doRetake;
		
		
		public boolean isRaisedDoRetake() {
			return doRetake;
		}
		
		protected void raiseDoRetake() {
			doRetake = true;
		}
		
		private String mySelection;
		
		public String getMySelection() {
			return mySelection;
		}
		
		public void setMySelection(String value) {
			this.mySelection = value;
		}
		
		private boolean selection;
		
		public boolean getSelection() {
			return selection;
		}
		
		public void setSelection(boolean value) {
			this.selection = value;
		}
		
		private boolean pay;
		
		public boolean getPay() {
			return pay;
		}
		
		public void setPay(boolean value) {
			this.pay = value;
		}
		
		private boolean hot;
		
		public boolean getHot() {
			return hot;
		}
		
		public void setHot(boolean value) {
			this.hot = value;
		}
		
		private boolean poor;
		
		public boolean getPoor() {
			return poor;
		}
		
		public void setPoor(boolean value) {
			this.poor = value;
		}
		
		private boolean taken;
		
		public boolean getTaken() {
			return taken;
		}
		
		public void setTaken(boolean value) {
			this.taken = value;
		}
		
		protected void clearEvents() {
			coffee = false;
			expresso = false;
			tea = false;
			soup = false;
			icedTea = false;
			cinquanteCents = false;
			vingtCinqCents = false;
			dixCents = false;
			bip = false;
			cancel = false;
			temp = false;
			size = false;
			sugar = false;
			validate = false;
		}
		protected void clearOutEvents() {
		
		doCoffee = false;
		doExpresso = false;
		doTea = false;
		doSoup = false;
		doIcedTea = false;
		doTemp = false;
		doSize = false;
		doSugar = false;
		doSelect = false;
		doPrepare = false;
		doPay = false;
		doCancel = false;
		doFinish = false;
		doReceipt = false;
		doPoor = false;
		doDosette = false;
		doGrain = false;
		doSachet = false;
		doGobelet = false;
		doHeat = false;
		doInfuse = false;
		doRetake = false;
		}
		
	}
	
	
	protected SCInterfaceImpl sCInterface;
	
	private boolean initialized = false;
	
	public enum State {
		_region0_order,
		_region0_order_pay_select_pay,
		_region0_order_pay_select_select,
		_region0_order_clock_timer,
		_region0_prepare,
		_region0_prepare_r1_heating,
		_region0_prepare_r1_sugar,
		_region0_prepare_r1_waiting,
		_region0_prepare_r2_etat0,
		_region0_prepare_r2_dosette,
		_region0_prepare_r2_grain,
		_region0_prepare_r2_sachet,
		_region0_prepare_r2_gobelet,
		_region0_prepare_r2_pour,
		_region0_prepare_r2_waiting_infuse,
		_region0_waiting_recuperation,
		$NullState$
	};
	
	private final State[] stateVector = new State[2];
	
	private int nextStateIndex;
	
	private ITimer timer;
	
	private final boolean[] timeEvents = new boolean[10];
	
	private Queue<Runnable> internalEventQueue = new LinkedList<Runnable>();
	private boolean ready;
	public DefaultSMStatemachine() {
		sCInterface = new SCInterfaceImpl();
	}
	
	public void init() {
		this.initialized = true;
		if (timer == null) {
			throw new IllegalStateException("timer not set.");
		}
		if (this.sCInterface.operationCallback == null) {
			throw new IllegalStateException("Operation callback for interface sCInterface must be set.");
		}
		
		for (int i = 0; i < 2; i++) {
			stateVector[i] = State.$NullState$;
		}
		clearEvents();
		clearOutEvents();
		sCInterface.setMySelection("");
		
		sCInterface.setSelection(false);
		
		sCInterface.setPay(false);
		
		sCInterface.setHot(false);
		
		sCInterface.setPoor(false);
		
		sCInterface.setTaken(false);
	}
	
	public void enter() {
		if (!initialized) {
			throw new IllegalStateException(
				"The state machine needs to be initialized first by calling the init() function."
			);
		}
		if (timer == null) {
			throw new IllegalStateException("timer not set.");
		}
		enterSequence__region0_default();
	}
	
	public void runCycle() {
		if (!initialized)
			throw new IllegalStateException(
					"The state machine needs to be initialized first by calling the init() function.");
		
		clearOutEvents();
	
		Runnable task = getNextEvent();
		if (task == null) {
			task = getDefaultEvent();
		}
		
		while (task != null) {
			task.run();
			clearEvents();
			task = getNextEvent();
		}
		
	}
	
	protected void singleCycle() {
		for (nextStateIndex = 0; nextStateIndex < stateVector.length; nextStateIndex++) {
			switch (stateVector[nextStateIndex]) {
			case _region0_order_pay_select_pay:
				_region0_order_pay_select_pay_react(true);
				break;
			case _region0_order_pay_select_select:
				_region0_order_pay_select_select_react(true);
				break;
			case _region0_order_clock_timer:
				_region0_order_clock_timer_react(true);
				break;
			case _region0_prepare_r1_heating:
				_region0_prepare_r1_heating_react(true);
				break;
			case _region0_prepare_r1_sugar:
				_region0_prepare_r1_sugar_react(true);
				break;
			case _region0_prepare_r1_waiting:
				_region0_prepare_r1_waiting_react(true);
				break;
			case _region0_prepare_r2_etat0:
				_region0_prepare_r2_etat0_react(true);
				break;
			case _region0_prepare_r2_dosette:
				_region0_prepare_r2_dosette_react(true);
				break;
			case _region0_prepare_r2_grain:
				_region0_prepare_r2_grain_react(true);
				break;
			case _region0_prepare_r2_sachet:
				_region0_prepare_r2_sachet_react(true);
				break;
			case _region0_prepare_r2_gobelet:
				_region0_prepare_r2_gobelet_react(true);
				break;
			case _region0_prepare_r2_pour:
				_region0_prepare_r2_pour_react(true);
				break;
			case _region0_prepare_r2_waiting_infuse:
				_region0_prepare_r2_waiting_infuse_react(true);
				break;
			case _region0_waiting_recuperation:
				_region0_waiting_recuperation_react(true);
				break;
			default:
				// $NullState$
			}
		}
	}
	
	protected Runnable getNextEvent() {
		if(!internalEventQueue.isEmpty()) {
			return internalEventQueue.poll();
		}
		return null;
	}
	
	protected Runnable getDefaultEvent() {
		return new Runnable() {
			@Override
			public void run() {
				singleCycle();
			}
		};
	}
	
	public void exit() {
		exitSequence__region0();
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public boolean isActive() {
		return stateVector[0] != State.$NullState$||stateVector[1] != State.$NullState$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public boolean isFinal() {
		return false;
	}
	/**
	* This method resets the incoming events (time events included).
	*/
	protected void clearEvents() {
		sCInterface.clearEvents();
		ready = false;
		for (int i=0; i<timeEvents.length; i++) {
			timeEvents[i] = false;
		}
	}
	
	/**
	* This method resets the outgoing events.
	*/
	protected void clearOutEvents() {
		sCInterface.clearOutEvents();
	}
	
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public boolean isStateActive(State state) {
	
		switch (state) {
		case _region0_order:
			return stateVector[0].ordinal() >= State.
					_region0_order.ordinal()&& stateVector[0].ordinal() <= State._region0_order_clock_timer.ordinal();
		case _region0_order_pay_select_pay:
			return stateVector[0] == State._region0_order_pay_select_pay;
		case _region0_order_pay_select_select:
			return stateVector[0] == State._region0_order_pay_select_select;
		case _region0_order_clock_timer:
			return stateVector[1] == State._region0_order_clock_timer;
		case _region0_prepare:
			return stateVector[0].ordinal() >= State.
					_region0_prepare.ordinal()&& stateVector[0].ordinal() <= State._region0_prepare_r2_waiting_infuse.ordinal();
		case _region0_prepare_r1_heating:
			return stateVector[0] == State._region0_prepare_r1_heating;
		case _region0_prepare_r1_sugar:
			return stateVector[0] == State._region0_prepare_r1_sugar;
		case _region0_prepare_r1_waiting:
			return stateVector[0] == State._region0_prepare_r1_waiting;
		case _region0_prepare_r2_etat0:
			return stateVector[1] == State._region0_prepare_r2_etat0;
		case _region0_prepare_r2_dosette:
			return stateVector[1] == State._region0_prepare_r2_dosette;
		case _region0_prepare_r2_grain:
			return stateVector[1] == State._region0_prepare_r2_grain;
		case _region0_prepare_r2_sachet:
			return stateVector[1] == State._region0_prepare_r2_sachet;
		case _region0_prepare_r2_gobelet:
			return stateVector[1] == State._region0_prepare_r2_gobelet;
		case _region0_prepare_r2_pour:
			return stateVector[1] == State._region0_prepare_r2_pour;
		case _region0_prepare_r2_waiting_infuse:
			return stateVector[1] == State._region0_prepare_r2_waiting_infuse;
		case _region0_waiting_recuperation:
			return stateVector[0] == State._region0_waiting_recuperation;
		default:
			return false;
		}
	}
	
	/**
	* Set the {@link ITimer} for the state machine. It must be set
	* externally on a timed state machine before a run cycle can be correctly
	* executed.
	* 
	* @param timer
	*/
	public void setTimer(ITimer timer) {
		this.timer = timer;
	}
	
	/**
	* Returns the currently used timer.
	* 
	* @return {@link ITimer}
	*/
	public ITimer getTimer() {
		return timer;
	}
	
	public void timeElapsed(int eventID) {
		timeEvents[eventID] = true;
		runCycle();
	}
	
	public SCInterface getSCInterface() {
		return sCInterface;
	}
	
	private void raiseReady() {
	
		internalEventQueue.add( new Runnable() {
			@Override public void run() {
				ready = true;					
				singleCycle();
			}
		});
	}
	
	public void raiseCoffee() {
		sCInterface.raiseCoffee();
	}
	
	public void raiseExpresso() {
		sCInterface.raiseExpresso();
	}
	
	public void raiseTea() {
		sCInterface.raiseTea();
	}
	
	public void raiseSoup() {
		sCInterface.raiseSoup();
	}
	
	public void raiseIcedTea() {
		sCInterface.raiseIcedTea();
	}
	
	public void raiseCinquanteCents() {
		sCInterface.raiseCinquanteCents();
	}
	
	public void raiseVingtCinqCents() {
		sCInterface.raiseVingtCinqCents();
	}
	
	public void raiseDixCents() {
		sCInterface.raiseDixCents();
	}
	
	public void raiseBip() {
		sCInterface.raiseBip();
	}
	
	public void raiseCancel() {
		sCInterface.raiseCancel();
	}
	
	public void raiseTemp() {
		sCInterface.raiseTemp();
	}
	
	public void raiseSize() {
		sCInterface.raiseSize();
	}
	
	public void raiseSugar() {
		sCInterface.raiseSugar();
	}
	
	public void raiseValidate() {
		sCInterface.raiseValidate();
	}
	
	public boolean isRaisedDoCoffee() {
		return sCInterface.isRaisedDoCoffee();
	}
	
	public boolean isRaisedDoExpresso() {
		return sCInterface.isRaisedDoExpresso();
	}
	
	public boolean isRaisedDoTea() {
		return sCInterface.isRaisedDoTea();
	}
	
	public boolean isRaisedDoSoup() {
		return sCInterface.isRaisedDoSoup();
	}
	
	public boolean isRaisedDoIcedTea() {
		return sCInterface.isRaisedDoIcedTea();
	}
	
	public boolean isRaisedDoTemp() {
		return sCInterface.isRaisedDoTemp();
	}
	
	public boolean isRaisedDoSize() {
		return sCInterface.isRaisedDoSize();
	}
	
	public boolean isRaisedDoSugar() {
		return sCInterface.isRaisedDoSugar();
	}
	
	public boolean isRaisedDoSelect() {
		return sCInterface.isRaisedDoSelect();
	}
	
	public boolean isRaisedDoPrepare() {
		return sCInterface.isRaisedDoPrepare();
	}
	
	public boolean isRaisedDoPay() {
		return sCInterface.isRaisedDoPay();
	}
	
	public boolean isRaisedDoCancel() {
		return sCInterface.isRaisedDoCancel();
	}
	
	public boolean isRaisedDoFinish() {
		return sCInterface.isRaisedDoFinish();
	}
	
	public boolean isRaisedDoReceipt() {
		return sCInterface.isRaisedDoReceipt();
	}
	
	public boolean isRaisedDoPoor() {
		return sCInterface.isRaisedDoPoor();
	}
	
	public boolean isRaisedDoDosette() {
		return sCInterface.isRaisedDoDosette();
	}
	
	public boolean isRaisedDoGrain() {
		return sCInterface.isRaisedDoGrain();
	}
	
	public boolean isRaisedDoSachet() {
		return sCInterface.isRaisedDoSachet();
	}
	
	public boolean isRaisedDoGobelet() {
		return sCInterface.isRaisedDoGobelet();
	}
	
	public boolean isRaisedDoHeat() {
		return sCInterface.isRaisedDoHeat();
	}
	
	public boolean isRaisedDoInfuse() {
		return sCInterface.isRaisedDoInfuse();
	}
	
	public boolean isRaisedDoRetake() {
		return sCInterface.isRaisedDoRetake();
	}
	
	public String getMySelection() {
		return sCInterface.getMySelection();
	}
	
	public void setMySelection(String value) {
		sCInterface.setMySelection(value);
	}
	
	public boolean getSelection() {
		return sCInterface.getSelection();
	}
	
	public void setSelection(boolean value) {
		sCInterface.setSelection(value);
	}
	
	public boolean getPay() {
		return sCInterface.getPay();
	}
	
	public void setPay(boolean value) {
		sCInterface.setPay(value);
	}
	
	public boolean getHot() {
		return sCInterface.getHot();
	}
	
	public void setHot(boolean value) {
		sCInterface.setHot(value);
	}
	
	public boolean getPoor() {
		return sCInterface.getPoor();
	}
	
	public void setPoor(boolean value) {
		sCInterface.setPoor(value);
	}
	
	public boolean getTaken() {
		return sCInterface.getTaken();
	}
	
	public void setTaken(boolean value) {
		sCInterface.setTaken(value);
	}
	
	/* Entry action for state 'order'. */
	private void entryAction__region0_order() {
		timer.setTimer(this, 0, 15, true);
	}
	
	/* Entry action for state 'pay'. */
	private void entryAction__region0_order_pay_select_pay() {
		sCInterface.setPay(sCInterface.operationCallback.isPay());
	}
	
	/* Entry action for state 'select'. */
	private void entryAction__region0_order_pay_select_select() {
		sCInterface.setSelection(true);
		
		sCInterface.setPay(sCInterface.operationCallback.isPay());
	}
	
	/* Entry action for state 'timer'. */
	private void entryAction__region0_order_clock_timer() {
		timer.setTimer(this, 1, (45 * 1000), false);
	}
	
	/* Entry action for state 'prepare'. */
	private void entryAction__region0_prepare() {
		sCInterface.raiseDoReceipt();
	}
	
	/* Entry action for state 'heating'. */
	private void entryAction__region0_prepare_r1_heating() {
		timer.setTimer(this, 2, 200, true);
		
		sCInterface.raiseDoHeat();
	}
	
	/* Entry action for state 'sugar'. */
	private void entryAction__region0_prepare_r1_sugar() {
		sCInterface.raiseDoSugar();
	}
	
	/* Entry action for state 'etat0'. */
	private void entryAction__region0_prepare_r2_etat0() {
		sCInterface.setMySelection(sCInterface.operationCallback.getSelection());
	}
	
	/* Entry action for state 'dosette'. */
	private void entryAction__region0_prepare_r2_dosette() {
		timer.setTimer(this, 3, (1 * 1000), false);
		
		sCInterface.raiseDoDosette();
	}
	
	/* Entry action for state 'grain'. */
	private void entryAction__region0_prepare_r2_grain() {
		timer.setTimer(this, 4, (1 * 1000), false);
		
		sCInterface.raiseDoGrain();
	}
	
	/* Entry action for state 'sachet'. */
	private void entryAction__region0_prepare_r2_sachet() {
		timer.setTimer(this, 5, (1 * 1000), false);
		
		sCInterface.raiseDoSachet();
	}
	
	/* Entry action for state 'gobelet'. */
	private void entryAction__region0_prepare_r2_gobelet() {
		timer.setTimer(this, 6, 100, true);
		
		sCInterface.raiseDoGobelet();
	}
	
	/* Entry action for state 'pour'. */
	private void entryAction__region0_prepare_r2_pour() {
		timer.setTimer(this, 7, 200, true);
		
		raiseReady();
		
		sCInterface.raiseDoPoor();
	}
	
	/* Entry action for state 'waiting infuse'. */
	private void entryAction__region0_prepare_r2_waiting_infuse() {
		timer.setTimer(this, 8, (10 * 1000), false);
		
		sCInterface.raiseDoInfuse();
	}
	
	/* Entry action for state 'waiting recuperation'. */
	private void entryAction__region0_waiting_recuperation() {
		timer.setTimer(this, 9, 200, true);
	}
	
	/* Exit action for state 'order'. */
	private void exitAction__region0_order() {
		timer.unsetTimer(this, 0);
	}
	
	/* Exit action for state 'timer'. */
	private void exitAction__region0_order_clock_timer() {
		timer.unsetTimer(this, 1);
	}
	
	/* Exit action for state 'heating'. */
	private void exitAction__region0_prepare_r1_heating() {
		timer.unsetTimer(this, 2);
	}
	
	/* Exit action for state 'dosette'. */
	private void exitAction__region0_prepare_r2_dosette() {
		timer.unsetTimer(this, 3);
	}
	
	/* Exit action for state 'grain'. */
	private void exitAction__region0_prepare_r2_grain() {
		timer.unsetTimer(this, 4);
	}
	
	/* Exit action for state 'sachet'. */
	private void exitAction__region0_prepare_r2_sachet() {
		timer.unsetTimer(this, 5);
	}
	
	/* Exit action for state 'gobelet'. */
	private void exitAction__region0_prepare_r2_gobelet() {
		timer.unsetTimer(this, 6);
	}
	
	/* Exit action for state 'pour'. */
	private void exitAction__region0_prepare_r2_pour() {
		timer.unsetTimer(this, 7);
	}
	
	/* Exit action for state 'waiting infuse'. */
	private void exitAction__region0_prepare_r2_waiting_infuse() {
		timer.unsetTimer(this, 8);
	}
	
	/* Exit action for state 'waiting recuperation'. */
	private void exitAction__region0_waiting_recuperation() {
		timer.unsetTimer(this, 9);
	}
	
	/* 'default' enter sequence for state order */
	private void enterSequence__region0_order_default() {
		entryAction__region0_order();
		enterSequence__region0_order_pay_select_default();
		enterSequence__region0_order_clock_default();
	}
	
	/* 'default' enter sequence for state pay */
	private void enterSequence__region0_order_pay_select_pay_default() {
		entryAction__region0_order_pay_select_pay();
		nextStateIndex = 0;
		stateVector[0] = State._region0_order_pay_select_pay;
	}
	
	/* 'default' enter sequence for state select */
	private void enterSequence__region0_order_pay_select_select_default() {
		entryAction__region0_order_pay_select_select();
		nextStateIndex = 0;
		stateVector[0] = State._region0_order_pay_select_select;
	}
	
	/* 'default' enter sequence for state timer */
	private void enterSequence__region0_order_clock_timer_default() {
		entryAction__region0_order_clock_timer();
		nextStateIndex = 1;
		stateVector[1] = State._region0_order_clock_timer;
	}
	
	/* 'default' enter sequence for state prepare */
	private void enterSequence__region0_prepare_default() {
		entryAction__region0_prepare();
		enterSequence__region0_prepare_r1_default();
		enterSequence__region0_prepare_r2_default();
	}
	
	/* 'default' enter sequence for state heating */
	private void enterSequence__region0_prepare_r1_heating_default() {
		entryAction__region0_prepare_r1_heating();
		nextStateIndex = 0;
		stateVector[0] = State._region0_prepare_r1_heating;
	}
	
	/* 'default' enter sequence for state sugar */
	private void enterSequence__region0_prepare_r1_sugar_default() {
		entryAction__region0_prepare_r1_sugar();
		nextStateIndex = 0;
		stateVector[0] = State._region0_prepare_r1_sugar;
	}
	
	/* 'default' enter sequence for state waiting */
	private void enterSequence__region0_prepare_r1_waiting_default() {
		nextStateIndex = 0;
		stateVector[0] = State._region0_prepare_r1_waiting;
	}
	
	/* 'default' enter sequence for state etat0 */
	private void enterSequence__region0_prepare_r2_etat0_default() {
		entryAction__region0_prepare_r2_etat0();
		nextStateIndex = 1;
		stateVector[1] = State._region0_prepare_r2_etat0;
	}
	
	/* 'default' enter sequence for state dosette */
	private void enterSequence__region0_prepare_r2_dosette_default() {
		entryAction__region0_prepare_r2_dosette();
		nextStateIndex = 1;
		stateVector[1] = State._region0_prepare_r2_dosette;
	}
	
	/* 'default' enter sequence for state grain */
	private void enterSequence__region0_prepare_r2_grain_default() {
		entryAction__region0_prepare_r2_grain();
		nextStateIndex = 1;
		stateVector[1] = State._region0_prepare_r2_grain;
	}
	
	/* 'default' enter sequence for state sachet */
	private void enterSequence__region0_prepare_r2_sachet_default() {
		entryAction__region0_prepare_r2_sachet();
		nextStateIndex = 1;
		stateVector[1] = State._region0_prepare_r2_sachet;
	}
	
	/* 'default' enter sequence for state gobelet */
	private void enterSequence__region0_prepare_r2_gobelet_default() {
		entryAction__region0_prepare_r2_gobelet();
		nextStateIndex = 1;
		stateVector[1] = State._region0_prepare_r2_gobelet;
	}
	
	/* 'default' enter sequence for state pour */
	private void enterSequence__region0_prepare_r2_pour_default() {
		entryAction__region0_prepare_r2_pour();
		nextStateIndex = 1;
		stateVector[1] = State._region0_prepare_r2_pour;
	}
	
	/* 'default' enter sequence for state waiting infuse */
	private void enterSequence__region0_prepare_r2_waiting_infuse_default() {
		entryAction__region0_prepare_r2_waiting_infuse();
		nextStateIndex = 1;
		stateVector[1] = State._region0_prepare_r2_waiting_infuse;
	}
	
	/* 'default' enter sequence for state waiting recuperation */
	private void enterSequence__region0_waiting_recuperation_default() {
		entryAction__region0_waiting_recuperation();
		nextStateIndex = 0;
		stateVector[0] = State._region0_waiting_recuperation;
	}
	
	/* 'default' enter sequence for region null */
	private void enterSequence__region0_default() {
		react__region0__entry_Default();
	}
	
	/* 'default' enter sequence for region pay/select */
	private void enterSequence__region0_order_pay_select_default() {
		react__region0_order_pay_select__entry_Default();
	}
	
	/* 'default' enter sequence for region clock */
	private void enterSequence__region0_order_clock_default() {
		react__region0_order_clock__entry_Default();
	}
	
	/* 'default' enter sequence for region r1 */
	private void enterSequence__region0_prepare_r1_default() {
		react__region0_prepare_r1__entry_Default();
	}
	
	/* 'default' enter sequence for region r2 */
	private void enterSequence__region0_prepare_r2_default() {
		react__region0_prepare_r2__entry_Default();
	}
	
	/* Default exit sequence for state order */
	private void exitSequence__region0_order() {
		exitSequence__region0_order_pay_select();
		exitSequence__region0_order_clock();
		exitAction__region0_order();
	}
	
	/* Default exit sequence for state pay */
	private void exitSequence__region0_order_pay_select_pay() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state select */
	private void exitSequence__region0_order_pay_select_select() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state timer */
	private void exitSequence__region0_order_clock_timer() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
		
		exitAction__region0_order_clock_timer();
	}
	
	/* Default exit sequence for state prepare */
	private void exitSequence__region0_prepare() {
		exitSequence__region0_prepare_r1();
		exitSequence__region0_prepare_r2();
	}
	
	/* Default exit sequence for state heating */
	private void exitSequence__region0_prepare_r1_heating() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction__region0_prepare_r1_heating();
	}
	
	/* Default exit sequence for state sugar */
	private void exitSequence__region0_prepare_r1_sugar() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state waiting */
	private void exitSequence__region0_prepare_r1_waiting() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state etat0 */
	private void exitSequence__region0_prepare_r2_etat0() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
	}
	
	/* Default exit sequence for state dosette */
	private void exitSequence__region0_prepare_r2_dosette() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
		
		exitAction__region0_prepare_r2_dosette();
	}
	
	/* Default exit sequence for state grain */
	private void exitSequence__region0_prepare_r2_grain() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
		
		exitAction__region0_prepare_r2_grain();
	}
	
	/* Default exit sequence for state sachet */
	private void exitSequence__region0_prepare_r2_sachet() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
		
		exitAction__region0_prepare_r2_sachet();
	}
	
	/* Default exit sequence for state gobelet */
	private void exitSequence__region0_prepare_r2_gobelet() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
		
		exitAction__region0_prepare_r2_gobelet();
	}
	
	/* Default exit sequence for state pour */
	private void exitSequence__region0_prepare_r2_pour() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
		
		exitAction__region0_prepare_r2_pour();
	}
	
	/* Default exit sequence for state waiting infuse */
	private void exitSequence__region0_prepare_r2_waiting_infuse() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
		
		exitAction__region0_prepare_r2_waiting_infuse();
	}
	
	/* Default exit sequence for state waiting recuperation */
	private void exitSequence__region0_waiting_recuperation() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction__region0_waiting_recuperation();
	}
	
	/* Default exit sequence for region null */
	private void exitSequence__region0() {
		switch (stateVector[0]) {
		case _region0_order_pay_select_pay:
			exitSequence__region0_order_pay_select_pay();
			break;
		case _region0_order_pay_select_select:
			exitSequence__region0_order_pay_select_select();
			break;
		case _region0_prepare_r1_heating:
			exitSequence__region0_prepare_r1_heating();
			break;
		case _region0_prepare_r1_sugar:
			exitSequence__region0_prepare_r1_sugar();
			break;
		case _region0_prepare_r1_waiting:
			exitSequence__region0_prepare_r1_waiting();
			break;
		case _region0_waiting_recuperation:
			exitSequence__region0_waiting_recuperation();
			break;
		default:
			break;
		}
		
		switch (stateVector[1]) {
		case _region0_order_clock_timer:
			exitSequence__region0_order_clock_timer();
			exitAction__region0_order();
			break;
		case _region0_prepare_r2_etat0:
			exitSequence__region0_prepare_r2_etat0();
			break;
		case _region0_prepare_r2_dosette:
			exitSequence__region0_prepare_r2_dosette();
			break;
		case _region0_prepare_r2_grain:
			exitSequence__region0_prepare_r2_grain();
			break;
		case _region0_prepare_r2_sachet:
			exitSequence__region0_prepare_r2_sachet();
			break;
		case _region0_prepare_r2_gobelet:
			exitSequence__region0_prepare_r2_gobelet();
			break;
		case _region0_prepare_r2_pour:
			exitSequence__region0_prepare_r2_pour();
			break;
		case _region0_prepare_r2_waiting_infuse:
			exitSequence__region0_prepare_r2_waiting_infuse();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region pay/select */
	private void exitSequence__region0_order_pay_select() {
		switch (stateVector[0]) {
		case _region0_order_pay_select_pay:
			exitSequence__region0_order_pay_select_pay();
			break;
		case _region0_order_pay_select_select:
			exitSequence__region0_order_pay_select_select();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region clock */
	private void exitSequence__region0_order_clock() {
		switch (stateVector[1]) {
		case _region0_order_clock_timer:
			exitSequence__region0_order_clock_timer();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r1 */
	private void exitSequence__region0_prepare_r1() {
		switch (stateVector[0]) {
		case _region0_prepare_r1_heating:
			exitSequence__region0_prepare_r1_heating();
			break;
		case _region0_prepare_r1_sugar:
			exitSequence__region0_prepare_r1_sugar();
			break;
		case _region0_prepare_r1_waiting:
			exitSequence__region0_prepare_r1_waiting();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r2 */
	private void exitSequence__region0_prepare_r2() {
		switch (stateVector[1]) {
		case _region0_prepare_r2_etat0:
			exitSequence__region0_prepare_r2_etat0();
			break;
		case _region0_prepare_r2_dosette:
			exitSequence__region0_prepare_r2_dosette();
			break;
		case _region0_prepare_r2_grain:
			exitSequence__region0_prepare_r2_grain();
			break;
		case _region0_prepare_r2_sachet:
			exitSequence__region0_prepare_r2_sachet();
			break;
		case _region0_prepare_r2_gobelet:
			exitSequence__region0_prepare_r2_gobelet();
			break;
		case _region0_prepare_r2_pour:
			exitSequence__region0_prepare_r2_pour();
			break;
		case _region0_prepare_r2_waiting_infuse:
			exitSequence__region0_prepare_r2_waiting_infuse();
			break;
		default:
			break;
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react__region0_order_pay_select__entry_Default() {
		enterSequence__region0_order_pay_select_pay_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react__region0_order_clock__entry_Default() {
		enterSequence__region0_order_clock_timer_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react__region0__entry_Default() {
		enterSequence__region0_order_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react__region0_prepare_r1__entry_Default() {
		enterSequence__region0_prepare_r1_heating_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react__region0_prepare_r2__entry_Default() {
		enterSequence__region0_prepare_r2_etat0_default();
	}
	
	private boolean react() {
		return false;
	}
	
	private boolean _region0_order_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (((timeEvents[0]) && ((sCInterface.getSelection() && sCInterface.getPay())))) {
				exitSequence__region0_order();
				enterSequence__region0_prepare_default();
				react();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean _region0_order_pay_select_pay_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if ((sCInterface.coffee || (sCInterface.expresso || (sCInterface.tea || (sCInterface.soup || sCInterface.icedTea))))) {
				exitSequence__region0_order_pay_select_pay();
				sCInterface.raiseDoSelect();
				
				enterSequence__region0_order_pay_select_select_default();
			} else {
				if ((sCInterface.cinquanteCents || (sCInterface.vingtCinqCents || sCInterface.dixCents))) {
					exitSequence__region0_order_pay_select_pay();
					sCInterface.raiseDoPay();
					
					enterSequence__region0_order_pay_select_pay_default();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
	private boolean _region0_order_pay_select_select_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if ((sCInterface.coffee || (sCInterface.expresso || (sCInterface.tea || (sCInterface.soup || sCInterface.icedTea))))) {
				exitSequence__region0_order_pay_select_select();
				sCInterface.raiseDoSelect();
				
				enterSequence__region0_order_pay_select_select_default();
			} else {
				if ((sCInterface.cinquanteCents || (sCInterface.vingtCinqCents || sCInterface.dixCents))) {
					exitSequence__region0_order_pay_select_select();
					sCInterface.raiseDoPay();
					
					enterSequence__region0_order_pay_select_pay_default();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
	private boolean _region0_order_clock_timer_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if ((timeEvents[1] || sCInterface.cancel)) {
				exitSequence__region0_order();
				sCInterface.raiseDoCancel();
				
				enterSequence__region0_order_default();
				react();
			} else {
				if ((sCInterface.coffee || (sCInterface.expresso || (sCInterface.tea || (sCInterface.soup || (sCInterface.icedTea || (sCInterface.cinquanteCents || (sCInterface.vingtCinqCents || (sCInterface.dixCents || (sCInterface.temp || (sCInterface.size || sCInterface.sugar))))))))))) {
					exitSequence__region0_order_clock_timer();
					enterSequence__region0_order_clock_timer_default();
					_region0_order_react(false);
				} else {
					did_transition = false;
				}
			}
		}
		if (did_transition==false) {
			did_transition = _region0_order_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean _region0_prepare_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if ((sCInterface.getPoor() && (sCInterface.getMySelection()== null?"tea" !=null : !sCInterface.getMySelection().equals("tea")))) {
				exitSequence__region0_prepare();
				enterSequence__region0_waiting_recuperation_default();
				react();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean _region0_prepare_r1_heating_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.getHot()) {
				exitSequence__region0_prepare_r1_heating();
				enterSequence__region0_prepare_r1_waiting_default();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			if (timeEvents[2]) {
				sCInterface.setHot(sCInterface.operationCallback.isHot());
			}
		}
		return did_transition;
	}
	
	private boolean _region0_prepare_r1_sugar_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			did_transition = false;
		}
		return did_transition;
	}
	
	private boolean _region0_prepare_r1_waiting_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (ready) {
				exitSequence__region0_prepare_r1_waiting();
				enterSequence__region0_prepare_r1_sugar_default();
			} else {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean _region0_prepare_r2_etat0_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if ((sCInterface.getMySelection()== null?"tea" ==null :sCInterface.getMySelection().equals("tea"))) {
				exitSequence__region0_prepare_r2_etat0();
				enterSequence__region0_prepare_r2_sachet_default();
				_region0_prepare_react(false);
			} else {
				if ((sCInterface.getMySelection()== null?"expresso" ==null :sCInterface.getMySelection().equals("expresso"))) {
					exitSequence__region0_prepare_r2_etat0();
					enterSequence__region0_prepare_r2_grain_default();
					_region0_prepare_react(false);
				} else {
					if ((sCInterface.getMySelection()== null?"coffee" ==null :sCInterface.getMySelection().equals("coffee"))) {
						exitSequence__region0_prepare_r2_etat0();
						enterSequence__region0_prepare_r2_dosette_default();
						_region0_prepare_react(false);
					} else {
						did_transition = false;
					}
				}
			}
		}
		if (did_transition==false) {
			did_transition = _region0_prepare_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean _region0_prepare_r2_dosette_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[3]) {
				exitSequence__region0_prepare_r2_dosette();
				enterSequence__region0_prepare_r2_gobelet_default();
				_region0_prepare_react(false);
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = _region0_prepare_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean _region0_prepare_r2_grain_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[4]) {
				exitSequence__region0_prepare_r2_grain();
				enterSequence__region0_prepare_r2_gobelet_default();
				_region0_prepare_react(false);
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = _region0_prepare_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean _region0_prepare_r2_sachet_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[5]) {
				exitSequence__region0_prepare_r2_sachet();
				enterSequence__region0_prepare_r2_gobelet_default();
				_region0_prepare_react(false);
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = _region0_prepare_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean _region0_prepare_r2_gobelet_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (((timeEvents[6]) && (sCInterface.getHot()))) {
				exitSequence__region0_prepare_r2_gobelet();
				enterSequence__region0_prepare_r2_pour_default();
				_region0_prepare_react(false);
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = _region0_prepare_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean _region0_prepare_r2_pour_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if ((sCInterface.getPoor() && (sCInterface.getMySelection()== null?"tea" ==null :sCInterface.getMySelection().equals("tea")))) {
				exitSequence__region0_prepare_r2_pour();
				enterSequence__region0_prepare_r2_waiting_infuse_default();
				_region0_prepare_react(false);
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			if (timeEvents[7]) {
				sCInterface.setPoor(sCInterface.operationCallback.isPoor());
			}
			did_transition = _region0_prepare_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean _region0_prepare_r2_waiting_infuse_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[8]) {
				exitSequence__region0_prepare();
				sCInterface.raiseDoRetake();
				
				enterSequence__region0_waiting_recuperation_default();
				react();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = _region0_prepare_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean _region0_waiting_recuperation_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.getTaken()) {
				exitSequence__region0_waiting_recuperation();
				enterSequence__region0_order_default();
				react();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			if (timeEvents[9]) {
				sCInterface.setTaken(sCInterface.operationCallback.isTaken());
			}
			did_transition = react();
		}
		return did_transition;
	}
	
}
