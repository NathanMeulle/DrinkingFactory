/** Generated by YAKINDU Statechart Tools code generator. */
package yakindu.defaultsm;

import yakindu.ITimer;

public class DefaultSMStatemachine implements IDefaultSMStatemachine {
	protected class SCInterfaceImpl implements SCInterface {
	
		private boolean coffee;
		
		
		public void raiseCoffee() {
			coffee = true;
			runCycle();
		}
		
		private boolean expresso;
		
		
		public void raiseExpresso() {
			expresso = true;
			runCycle();
		}
		
		private boolean tea;
		
		
		public void raiseTea() {
			tea = true;
			runCycle();
		}
		
		private boolean soup;
		
		
		public void raiseSoup() {
			soup = true;
			runCycle();
		}
		
		private boolean icedTea;
		
		
		public void raiseIcedTea() {
			icedTea = true;
			runCycle();
		}
		
		private boolean cinquanteCents;
		
		
		public void raiseCinquanteCents() {
			cinquanteCents = true;
			runCycle();
		}
		
		private boolean vingtCinqCents;
		
		
		public void raiseVingtCinqCents() {
			vingtCinqCents = true;
			runCycle();
		}
		
		private boolean dixCents;
		
		
		public void raiseDixCents() {
			dixCents = true;
			runCycle();
		}
		
		private boolean bip;
		
		
		public void raiseBip() {
			bip = true;
			runCycle();
		}
		
		private boolean cancel;
		
		
		public void raiseCancel() {
			cancel = true;
			runCycle();
		}
		
		private boolean temp;
		
		
		public void raiseTemp() {
			temp = true;
			runCycle();
		}
		
		private boolean size;
		
		
		public void raiseSize() {
			size = true;
			runCycle();
		}
		
		private boolean sugar;
		
		
		public void raiseSugar() {
			sugar = true;
			runCycle();
		}
		
		private boolean validate;
		
		
		public void raiseValidate() {
			validate = true;
			runCycle();
		}
		
		private boolean doCoffee;
		
		
		public boolean isRaisedDoCoffee() {
			return doCoffee;
		}
		
		protected void raiseDoCoffee() {
			doCoffee = true;
		}
		
		private boolean doExpresso;
		
		
		public boolean isRaisedDoExpresso() {
			return doExpresso;
		}
		
		protected void raiseDoExpresso() {
			doExpresso = true;
		}
		
		private boolean doTea;
		
		
		public boolean isRaisedDoTea() {
			return doTea;
		}
		
		protected void raiseDoTea() {
			doTea = true;
		}
		
		private boolean doSoup;
		
		
		public boolean isRaisedDoSoup() {
			return doSoup;
		}
		
		protected void raiseDoSoup() {
			doSoup = true;
		}
		
		private boolean doIcedTea;
		
		
		public boolean isRaisedDoIcedTea() {
			return doIcedTea;
		}
		
		protected void raiseDoIcedTea() {
			doIcedTea = true;
		}
		
		private boolean doTemp;
		
		
		public boolean isRaisedDoTemp() {
			return doTemp;
		}
		
		protected void raiseDoTemp() {
			doTemp = true;
		}
		
		private boolean doSize;
		
		
		public boolean isRaisedDoSize() {
			return doSize;
		}
		
		protected void raiseDoSize() {
			doSize = true;
		}
		
		private boolean doSugar;
		
		
		public boolean isRaisedDoSugar() {
			return doSugar;
		}
		
		protected void raiseDoSugar() {
			doSugar = true;
		}
		
		private boolean doSelect;
		
		
		public boolean isRaisedDoSelect() {
			return doSelect;
		}
		
		protected void raiseDoSelect() {
			doSelect = true;
		}
		
		private boolean doPrepare;
		
		
		public boolean isRaisedDoPrepare() {
			return doPrepare;
		}
		
		protected void raiseDoPrepare() {
			doPrepare = true;
		}
		
		private boolean doPay;
		
		
		public boolean isRaisedDoPay() {
			return doPay;
		}
		
		protected void raiseDoPay() {
			doPay = true;
		}
		
		private boolean doCancel;
		
		
		public boolean isRaisedDoCancel() {
			return doCancel;
		}
		
		protected void raiseDoCancel() {
			doCancel = true;
		}
		
		private boolean doFinish;
		
		
		public boolean isRaisedDoFinish() {
			return doFinish;
		}
		
		protected void raiseDoFinish() {
			doFinish = true;
		}
		
		private boolean selection;
		
		public boolean getSelection() {
			return selection;
		}
		
		public void setSelection(boolean value) {
			this.selection = value;
		}
		
		private boolean pay;
		
		public boolean getPay() {
			return pay;
		}
		
		public void setPay(boolean value) {
			this.pay = value;
		}
		
		protected void clearEvents() {
			coffee = false;
			expresso = false;
			tea = false;
			soup = false;
			icedTea = false;
			cinquanteCents = false;
			vingtCinqCents = false;
			dixCents = false;
			bip = false;
			cancel = false;
			temp = false;
			size = false;
			sugar = false;
			validate = false;
		}
		protected void clearOutEvents() {
		
		doCoffee = false;
		doExpresso = false;
		doTea = false;
		doSoup = false;
		doIcedTea = false;
		doTemp = false;
		doSize = false;
		doSugar = false;
		doSelect = false;
		doPrepare = false;
		doPay = false;
		doCancel = false;
		doFinish = false;
		}
		
	}
	
	
	protected SCInterfaceImpl sCInterface;
	
	private boolean initialized = false;
	
	public enum State {
		_region0_order,
		_region0_order_pay_select_pay,
		_region0_order_pay_select_select,
		_region0_order_pay_select_cancel,
		_region0_order_slider_temp,
		_region0_order_slider_sugar,
		_region0_order_slider_size,
		_region0_prepare,
		$NullState$
	};
	
	private final State[] stateVector = new State[2];
	
	private int nextStateIndex;
	
	private ITimer timer;
	
	private final boolean[] timeEvents = new boolean[3];
	
	public DefaultSMStatemachine() {
		sCInterface = new SCInterfaceImpl();
	}
	
	public void init() {
		this.initialized = true;
		if (timer == null) {
			throw new IllegalStateException("timer not set.");
		}
		for (int i = 0; i < 2; i++) {
			stateVector[i] = State.$NullState$;
		}
		clearEvents();
		clearOutEvents();
		sCInterface.setSelection(false);
		
		sCInterface.setPay(false);
	}
	
	public void enter() {
		if (!initialized) {
			throw new IllegalStateException(
				"The state machine needs to be initialized first by calling the init() function."
			);
		}
		if (timer == null) {
			throw new IllegalStateException("timer not set.");
		}
		enterSequence__region0_default();
	}
	
	public void runCycle() {
		if (!initialized)
			throw new IllegalStateException(
					"The state machine needs to be initialized first by calling the init() function.");
		clearOutEvents();
		for (nextStateIndex = 0; nextStateIndex < stateVector.length; nextStateIndex++) {
			switch (stateVector[nextStateIndex]) {
			case _region0_order_pay_select_pay:
				_region0_order_pay_select_pay_react(true);
				break;
			case _region0_order_pay_select_select:
				_region0_order_pay_select_select_react(true);
				break;
			case _region0_order_pay_select_cancel:
				_region0_order_pay_select_cancel_react(true);
				break;
			case _region0_order_slider_temp:
				_region0_order_slider_temp_react(true);
				break;
			case _region0_order_slider_sugar:
				_region0_order_slider_sugar_react(true);
				break;
			case _region0_order_slider_size:
				_region0_order_slider_size_react(true);
				break;
			case _region0_prepare:
				_region0_prepare_react(true);
				break;
			default:
				// $NullState$
			}
		}
		clearEvents();
	}
	public void exit() {
		exitSequence__region0();
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public boolean isActive() {
		return stateVector[0] != State.$NullState$||stateVector[1] != State.$NullState$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public boolean isFinal() {
		return false;
	}
	/**
	* This method resets the incoming events (time events included).
	*/
	protected void clearEvents() {
		sCInterface.clearEvents();
		for (int i=0; i<timeEvents.length; i++) {
			timeEvents[i] = false;
		}
	}
	
	/**
	* This method resets the outgoing events.
	*/
	protected void clearOutEvents() {
		sCInterface.clearOutEvents();
	}
	
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public boolean isStateActive(State state) {
	
		switch (state) {
		case _region0_order:
			return stateVector[0].ordinal() >= State.
					_region0_order.ordinal()&& stateVector[0].ordinal() <= State._region0_order_slider_size.ordinal();
		case _region0_order_pay_select_pay:
			return stateVector[0] == State._region0_order_pay_select_pay;
		case _region0_order_pay_select_select:
			return stateVector[0] == State._region0_order_pay_select_select;
		case _region0_order_pay_select_cancel:
			return stateVector[0] == State._region0_order_pay_select_cancel;
		case _region0_order_slider_temp:
			return stateVector[1] == State._region0_order_slider_temp;
		case _region0_order_slider_sugar:
			return stateVector[1] == State._region0_order_slider_sugar;
		case _region0_order_slider_size:
			return stateVector[1] == State._region0_order_slider_size;
		case _region0_prepare:
			return stateVector[0] == State._region0_prepare;
		default:
			return false;
		}
	}
	
	/**
	* Set the {@link ITimer} for the state machine. It must be set
	* externally on a timed state machine before a run cycle can be correctly
	* executed.
	* 
	* @param timer
	*/
	public void setTimer(ITimer timer) {
		this.timer = timer;
	}
	
	/**
	* Returns the currently used timer.
	* 
	* @return {@link ITimer}
	*/
	public ITimer getTimer() {
		return timer;
	}
	
	public void timeElapsed(int eventID) {
		timeEvents[eventID] = true;
		runCycle();
	}
	
	public SCInterface getSCInterface() {
		return sCInterface;
	}
	
	public void raiseCoffee() {
		sCInterface.raiseCoffee();
	}
	
	public void raiseExpresso() {
		sCInterface.raiseExpresso();
	}
	
	public void raiseTea() {
		sCInterface.raiseTea();
	}
	
	public void raiseSoup() {
		sCInterface.raiseSoup();
	}
	
	public void raiseIcedTea() {
		sCInterface.raiseIcedTea();
	}
	
	public void raiseCinquanteCents() {
		sCInterface.raiseCinquanteCents();
	}
	
	public void raiseVingtCinqCents() {
		sCInterface.raiseVingtCinqCents();
	}
	
	public void raiseDixCents() {
		sCInterface.raiseDixCents();
	}
	
	public void raiseBip() {
		sCInterface.raiseBip();
	}
	
	public void raiseCancel() {
		sCInterface.raiseCancel();
	}
	
	public void raiseTemp() {
		sCInterface.raiseTemp();
	}
	
	public void raiseSize() {
		sCInterface.raiseSize();
	}
	
	public void raiseSugar() {
		sCInterface.raiseSugar();
	}
	
	public void raiseValidate() {
		sCInterface.raiseValidate();
	}
	
	public boolean isRaisedDoCoffee() {
		return sCInterface.isRaisedDoCoffee();
	}
	
	public boolean isRaisedDoExpresso() {
		return sCInterface.isRaisedDoExpresso();
	}
	
	public boolean isRaisedDoTea() {
		return sCInterface.isRaisedDoTea();
	}
	
	public boolean isRaisedDoSoup() {
		return sCInterface.isRaisedDoSoup();
	}
	
	public boolean isRaisedDoIcedTea() {
		return sCInterface.isRaisedDoIcedTea();
	}
	
	public boolean isRaisedDoTemp() {
		return sCInterface.isRaisedDoTemp();
	}
	
	public boolean isRaisedDoSize() {
		return sCInterface.isRaisedDoSize();
	}
	
	public boolean isRaisedDoSugar() {
		return sCInterface.isRaisedDoSugar();
	}
	
	public boolean isRaisedDoSelect() {
		return sCInterface.isRaisedDoSelect();
	}
	
	public boolean isRaisedDoPrepare() {
		return sCInterface.isRaisedDoPrepare();
	}
	
	public boolean isRaisedDoPay() {
		return sCInterface.isRaisedDoPay();
	}
	
	public boolean isRaisedDoCancel() {
		return sCInterface.isRaisedDoCancel();
	}
	
	public boolean isRaisedDoFinish() {
		return sCInterface.isRaisedDoFinish();
	}
	
	public boolean getSelection() {
		return sCInterface.getSelection();
	}
	
	public void setSelection(boolean value) {
		sCInterface.setSelection(value);
	}
	
	public boolean getPay() {
		return sCInterface.getPay();
	}
	
	public void setPay(boolean value) {
		sCInterface.setPay(value);
	}
	
	/* Entry action for state 'pay'. */
	private void entryAction__region0_order_pay_select_pay() {
		timer.setTimer(this, 0, (45 * 1000), false);
	}
	
	/* Entry action for state 'select'. */
	private void entryAction__region0_order_pay_select_select() {
		timer.setTimer(this, 1, (45 * 1000), false);
	}
	
	/* Entry action for state 'cancel'. */
	private void entryAction__region0_order_pay_select_cancel() {
		timer.setTimer(this, 2, (1 * 1000), false);
		
		sCInterface.raiseDoCancel();
	}
	
	/* Entry action for state 'prepare'. */
	private void entryAction__region0_prepare() {
		sCInterface.raiseDoPrepare();
	}
	
	/* Exit action for state 'pay'. */
	private void exitAction__region0_order_pay_select_pay() {
		timer.unsetTimer(this, 0);
	}
	
	/* Exit action for state 'select'. */
	private void exitAction__region0_order_pay_select_select() {
		timer.unsetTimer(this, 1);
	}
	
	/* Exit action for state 'cancel'. */
	private void exitAction__region0_order_pay_select_cancel() {
		timer.unsetTimer(this, 2);
	}
	
	/* 'default' enter sequence for state pay */
	private void enterSequence__region0_order_pay_select_pay_default() {
		entryAction__region0_order_pay_select_pay();
		nextStateIndex = 0;
		stateVector[0] = State._region0_order_pay_select_pay;
	}
	
	/* 'default' enter sequence for state select */
	private void enterSequence__region0_order_pay_select_select_default() {
		entryAction__region0_order_pay_select_select();
		nextStateIndex = 0;
		stateVector[0] = State._region0_order_pay_select_select;
	}
	
	/* 'default' enter sequence for state cancel */
	private void enterSequence__region0_order_pay_select_cancel_default() {
		entryAction__region0_order_pay_select_cancel();
		nextStateIndex = 0;
		stateVector[0] = State._region0_order_pay_select_cancel;
	}
	
	/* 'default' enter sequence for state temp */
	private void enterSequence__region0_order_slider_temp_default() {
		nextStateIndex = 1;
		stateVector[1] = State._region0_order_slider_temp;
	}
	
	/* 'default' enter sequence for state sugar */
	private void enterSequence__region0_order_slider_sugar_default() {
		nextStateIndex = 1;
		stateVector[1] = State._region0_order_slider_sugar;
	}
	
	/* 'default' enter sequence for state size */
	private void enterSequence__region0_order_slider_size_default() {
		nextStateIndex = 1;
		stateVector[1] = State._region0_order_slider_size;
	}
	
	/* 'default' enter sequence for state prepare */
	private void enterSequence__region0_prepare_default() {
		entryAction__region0_prepare();
		nextStateIndex = 0;
		stateVector[0] = State._region0_prepare;
	}
	
	/* 'default' enter sequence for region null */
	private void enterSequence__region0_default() {
		react__region0__entry_Default();
	}
	
	/* 'default' enter sequence for region pay/select */
	private void enterSequence__region0_order_pay_select_default() {
		react__region0_order_pay_select__entry_Default();
	}
	
	/* 'default' enter sequence for region slider */
	private void enterSequence__region0_order_slider_default() {
		react__region0_order_slider__entry_Default();
	}
	
	/* Default exit sequence for state order */
	private void exitSequence__region0_order() {
		exitSequence__region0_order_pay_select();
		exitSequence__region0_order_slider();
	}
	
	/* Default exit sequence for state pay */
	private void exitSequence__region0_order_pay_select_pay() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction__region0_order_pay_select_pay();
	}
	
	/* Default exit sequence for state select */
	private void exitSequence__region0_order_pay_select_select() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction__region0_order_pay_select_select();
	}
	
	/* Default exit sequence for state cancel */
	private void exitSequence__region0_order_pay_select_cancel() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction__region0_order_pay_select_cancel();
	}
	
	/* Default exit sequence for state temp */
	private void exitSequence__region0_order_slider_temp() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
	}
	
	/* Default exit sequence for state sugar */
	private void exitSequence__region0_order_slider_sugar() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
	}
	
	/* Default exit sequence for state size */
	private void exitSequence__region0_order_slider_size() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
	}
	
	/* Default exit sequence for state prepare */
	private void exitSequence__region0_prepare() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for region null */
	private void exitSequence__region0() {
		switch (stateVector[0]) {
		case _region0_order_pay_select_pay:
			exitSequence__region0_order_pay_select_pay();
			break;
		case _region0_order_pay_select_select:
			exitSequence__region0_order_pay_select_select();
			break;
		case _region0_order_pay_select_cancel:
			exitSequence__region0_order_pay_select_cancel();
			break;
		case _region0_prepare:
			exitSequence__region0_prepare();
			break;
		default:
			break;
		}
		
		switch (stateVector[1]) {
		case _region0_order_slider_temp:
			exitSequence__region0_order_slider_temp();
			break;
		case _region0_order_slider_sugar:
			exitSequence__region0_order_slider_sugar();
			break;
		case _region0_order_slider_size:
			exitSequence__region0_order_slider_size();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region pay/select */
	private void exitSequence__region0_order_pay_select() {
		switch (stateVector[0]) {
		case _region0_order_pay_select_pay:
			exitSequence__region0_order_pay_select_pay();
			break;
		case _region0_order_pay_select_select:
			exitSequence__region0_order_pay_select_select();
			break;
		case _region0_order_pay_select_cancel:
			exitSequence__region0_order_pay_select_cancel();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region slider */
	private void exitSequence__region0_order_slider() {
		switch (stateVector[1]) {
		case _region0_order_slider_temp:
			exitSequence__region0_order_slider_temp();
			break;
		case _region0_order_slider_sugar:
			exitSequence__region0_order_slider_sugar();
			break;
		case _region0_order_slider_size:
			exitSequence__region0_order_slider_size();
			break;
		default:
			break;
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react__region0_order_pay_select__entry_Default() {
		enterSequence__region0_order_pay_select_pay_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react__region0_order_slider__entry_Default() {
		enterSequence__region0_order_slider_temp_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react__region0__entry_Default() {
		enterSequence__region0_order_pay_select_pay_default();
		enterSequence__region0_order_slider_default();
	}
	
	private boolean react() {
		return false;
	}
	
	private boolean _region0_order_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (((sCInterface.validate) && ((sCInterface.getSelection() && sCInterface.getPay())))) {
				exitSequence__region0_order();
				enterSequence__region0_prepare_default();
				react();
			} else {
				if (sCInterface.temp) {
					exitSequence__region0_order();
					sCInterface.raiseDoTemp();
					
					enterSequence__region0_order_pay_select_default();
					enterSequence__region0_order_slider_temp_default();
					react();
				} else {
					if (sCInterface.size) {
						exitSequence__region0_order();
						sCInterface.raiseDoSize();
						
						enterSequence__region0_order_pay_select_default();
						enterSequence__region0_order_slider_size_default();
						react();
					} else {
						if (sCInterface.sugar) {
							exitSequence__region0_order();
							sCInterface.raiseDoSugar();
							
							enterSequence__region0_order_pay_select_default();
							enterSequence__region0_order_slider_sugar_default();
							react();
						} else {
							did_transition = false;
						}
					}
				}
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean _region0_order_pay_select_pay_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if ((sCInterface.coffee || (sCInterface.expresso || (sCInterface.tea || (sCInterface.soup || sCInterface.icedTea))))) {
				exitSequence__region0_order_pay_select_pay();
				sCInterface.raiseDoSelect();
				
				enterSequence__region0_order_pay_select_select_default();
			} else {
				if (timeEvents[0]) {
					exitSequence__region0_order_pay_select_pay();
					enterSequence__region0_order_pay_select_cancel_default();
				} else {
					if ((sCInterface.cinquanteCents || (sCInterface.vingtCinqCents || sCInterface.dixCents))) {
						exitSequence__region0_order_pay_select_pay();
						sCInterface.raiseDoPay();
						
						enterSequence__region0_order_pay_select_pay_default();
					} else {
						did_transition = false;
					}
				}
			}
		}
		return did_transition;
	}
	
	private boolean _region0_order_pay_select_select_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if ((sCInterface.coffee || (sCInterface.expresso || (sCInterface.tea || (sCInterface.soup || sCInterface.icedTea))))) {
				exitSequence__region0_order_pay_select_select();
				sCInterface.raiseDoSelect();
				
				enterSequence__region0_order_pay_select_select_default();
			} else {
				if (timeEvents[1]) {
					exitSequence__region0_order_pay_select_select();
					enterSequence__region0_order_pay_select_cancel_default();
				} else {
					if ((sCInterface.cinquanteCents || (sCInterface.vingtCinqCents || sCInterface.dixCents))) {
						exitSequence__region0_order_pay_select_select();
						sCInterface.raiseDoPay();
						
						enterSequence__region0_order_pay_select_pay_default();
					} else {
						did_transition = false;
					}
				}
			}
		}
		return did_transition;
	}
	
	private boolean _region0_order_pay_select_cancel_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[2]) {
				exitSequence__region0_order_pay_select_cancel();
				enterSequence__region0_order_pay_select_pay_default();
			} else {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean _region0_order_slider_temp_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			did_transition = false;
		}
		if (did_transition==false) {
			did_transition = _region0_order_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean _region0_order_slider_sugar_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			did_transition = false;
		}
		if (did_transition==false) {
			did_transition = _region0_order_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean _region0_order_slider_size_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			did_transition = false;
		}
		if (did_transition==false) {
			did_transition = _region0_order_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean _region0_prepare_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			did_transition = false;
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
}
